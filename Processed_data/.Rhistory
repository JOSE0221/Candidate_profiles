# Enhanced function to clean candidate names by removing titles and positions
clean_candidate_name <- function(name) {
if(is.null(name) || length(name) == 0 || is.na(name)) return(NA_character_)
# Convert to lowercase for pattern matching
name_lower <- tolower(name)
# Enhanced patterns for Mexican political context
title_patterns <- c(
# Political titles with more variations
"\\b(diputad[oa]( federal| local)?|senador[a]|regidor[a]|síndic[oa]|president[ea]( municipal)?|gobernad[oa]r|alcalde[sa]?|jefe de gobierno|delegad[oa]|funcionari[oa]|secretari[oa]|subsecretari[oa])\\b",
# Professional titles with more Mexican variations
"\\b(lic\\.|licenciad[oa]|ing\\.|ingenier[oa]|dr\\.|doctor[a]|mtro\\.|maestr[oa]|prof\\.|profesor[a]|c\\.p\\.|contador[a]|arq\\.|arquitect[oa]|médic[oa])\\b",
# Academic titles
"\\b(doctor[a] en|maestr[oa] en|especialista en)\\b",
# Military/police titles
"\\b(general|coronel|capitán|teniente|sargento|oficial)\\b",
# Honorifics
"\\b(c\\.|don|doña|sr\\.|sra\\.|lic\\.)\\b",
# Designators
"\\b(candidat[oa]( a| por| de)?|propietari[oa]|suplente|titular|representante)\\b",
# Additional Mexican honorifics and designations
"\\b(maestro|maestra|contador público|contadora pública|químico|química|biólogo|bióloga|psicólogo|psicóloga|sociólogo|socióloga)\\b"
)
# Apply each pattern
for(pattern in title_patterns) {
name_lower <- gsub(pattern, "", name_lower, ignore.case = TRUE)
}
# Clean up extra spaces and standardize
name_clean <- name_lower %>%
gsub("\\s{2,}", " ", .) %>%    # Replace multiple spaces with single space
trimws() %>%                    # Remove leading/trailing whitespace
gsub("^\\s*$", NA, .)          # Replace empty strings with NA
# More robust capitalization for Spanish names with particles
if(!is.na(name_clean)) {
# Split name into words
words <- strsplit(name_clean, "\\s+")[[1]]
# Capitalize each word, but handle Spanish name particles appropriately
words_cap <- sapply(words, function(w) {
if(tolower(w) %in% c("de", "del", "la", "las", "los", "y", "e", "da", "van", "von", "der")) {
return(tolower(w))  # Keep particles lowercase
} else {
return(paste0(toupper(substr(w, 1, 1)), substr(w, 2, nchar(w))))
}
})
name_clean <- paste(words_cap, collapse = " ")
}
return(name_clean)
}
# Enhanced comprehensive function to standardize education level text for Mexican context
standardize_education_level <- function(education_text) {
# Handle NULL, NA or empty input
if(is.null(education_text) || length(education_text) == 0 ||
(is.character(education_text) && (nchar(education_text) == 0 || is.na(education_text)))) {
return("NO_ESPECIFICADO")
}
# Ensure the value is a character string
if(!is.character(education_text)) {
education_text <- as.character(education_text)
}
# Convert to lowercase for easier matching
education_lower <- tolower(education_text)
# Mexican doctorate terms
if(grepl("doctor|phd|doctorado|dr\\.|(d|doc) en [a-zá-úñ]|posgrado.+doctor|estudios.+doctor|grado.+doctor", education_lower)) {
return("DOCTORADO")
}
# Mexican master's degree terms
else if(grepl("maestr[ií]a|master|mba|magister|maest?r[ií]a en|m[aá]ster en|grado.+maestr|posgrado.+maestr|mtria|estudios.+maestr|m\\.c\\.|ma\\.|msc|m\\.a\\.|magister|postgrado.+(no.+doctorado)", education_lower)) {
return("MAESTRIA")
}
# Mexican professional degree terms - comprehensive patterns for Mexican context
else if(grepl("licenciatur|licenciado|ingenier[ií]a|ingeniero|abogad[oa]|contador|econom[ií]|administr|lic\\.|ing\\.|título.+profesional|cédula.+profesional|licenciado.+en|licenciada.+en|t[ií]tulo.+licenciatura|egresado.+licenciatura|carrera.+universitaria|estudios.+universitarios|t[ií]tulo.+universidad|universidad.+licenciado|profesional.+titulado|titulado.+profesion|derecho|medicina|médico|cirug[ía]|cirujan[ao]|médico.+cirujan[ao]|l\\.a\\.e|l\\.c\\.p|facultad.+de", education_lower)) {
return("LICENCIATURA")
}
# Better handling for incomplete/truncated studies
else if(grepl("trunc|incomplet|pasante|sin título|sin titula|sin conclu", education_lower)) {
# Check if we can determine the level that was incomplete
if(grepl("doctor|phd|doctorado", education_lower)) {
return("MAESTRIA")  # Incomplete doctorate typically means they have a master's
} else if(grepl("maestr[ií]a|master", education_lower)) {
return("LICENCIATURA")  # Incomplete master's typically means they have a bachelor's
} else if(grepl("licenciatur|ingenier[ií]a|profesional", education_lower)) {
return("TECNICO")  # Incomplete bachelor's typically qualifies as technical education
} else {
return("ESCOLARIDAD_NO_ESPECIFICADA")  # Default if we can't determine level
}
}
# Mexican technical education patterns - enhanced with more specific CONALEP and other Mexican institutions
else if(grepl("t[eé]cnic[oa]|carrera.+t[eé]cnica|estudios.+t[eé]cnico|formación.+t[eé]cnica|t[eé]cnico.+superior|t[eé]c\\.|preparacion.+t[eé]cnica|t\\.s\\.u|carrera.+comercial|diploma.+técnico|escuela.+técnica|instituto.+técnico|estudios.+técnicos|conalep|cecyt|cecati|cbtis|cetis|bachiller[a]?to técnic[oa]", education_lower)) {
return("TECNICO")
}
# Mexican high school patterns (bachillerato)
else if(grepl("bachiller|preparatoria|prepa|bachillerato|preparator|medio.+superior|nivel.+medio.+superior|educ.+media.+sup|educación.+media|certificado.+bachillerato|certificado.+prepa|escuela.+preparatoria|colegio.+bachiller|prepa.+completa|prepar.+terminada|bachillerato.+general|bachiller.+técnico|conalep", education_lower)) {
return("BACHILLERATO")
}
# Mexican secondary education patterns
else if(grepl("secundaria|media.+básica|nivel.+secundario|segundo.+nivel|educación.+media|escuela.+secundaria|estudios.+secundarios|certificado.+secundaria|nivel.+medio|secundaria.+completa|secundaria.+terminada", education_lower)) {
return("SECUNDARIA")
}
# Mexican primary education patterns
else if(grepl("primaria|básica|elemental|educación.+básica|nivel.+básico|educación.+elemental|escuela.+primaria|estudios.+primarios|certificado.+primaria|primaria.+completa|primaria.+terminada|educaci[oó]n.+elemental", education_lower)) {
return("PRIMARIA")
}
# No studies patterns
else if(grepl("sin estudio|sin escolaridad|ninguno|analfabeta|sin instruccion|sin preparaci[oó]n|sin escuela|no.+estudios|no.+escolaridad|sin.+educaci[oó]n", education_lower)) {
return("SIN_ESTUDIOS")
}
# If no clear match, try to infer from context using Mexican educational institutions
else {
# University/higher education institutions in Mexico
if(grepl("unam|ipn|itesm|tecnol[oó]gico.+monterrey|universidad|facultad|colmex|colegio.+m[eé]xico|uni|polit[eé]cnico|autonom[ao]|uam|buap|tec|anáhuac|ibero|itam|udg|la.+salle|universidad.+de|facult|escuela.+super", education_lower)) {
return("LICENCIATURA")
}
# High school level institutions
else if(grepl("conalep|cecyt|colegio|bachiller|cbt|cbta|cch|vocacional|cetis|cecati", education_lower)) {
return("BACHILLERATO")
}
# Other educational terms
else if(grepl("estudi|curs|escolar|educa|forma|academic|académic|aprend|aprendi|capaci", education_lower)) {
return("ESCOLARIDAD_NO_ESPECIFICADA")
}
else {
return("NO_ESPECIFICADO")
}
}
}
# Replace the existing function with this enhanced version
create_education_scale <- function(std_education_level) {
# Handle NULL, empty vector, NA, or non-character values
if(is.null(std_education_level) || length(std_education_level) == 0) {
return(NA_real_)
}
# Handle type conversion if needed
if(!is.character(std_education_level) && !is.na(std_education_level)) {
std_education_level <- as.character(std_education_level)
}
# Handle NA value after conversion
if(is.na(std_education_level)) {
return(NA_real_)
}
# Define a more nuanced numeric scale for each education level
education_scale <- case_when(
std_education_level == "DOCTORADO" ~ 7,
std_education_level == "MAESTRIA" ~ 6,
std_education_level == "LICENCIATURA" ~ 5,
std_education_level == "TECNICO" ~ 4,
std_education_level == "BACHILLERATO" ~ 3,
std_education_level == "SECUNDARIA" ~ 2,
std_education_level == "PRIMARIA" ~ 1,
std_education_level == "SIN_ESTUDIOS" ~ 0,
std_education_level == "ESCOLARIDAD_NO_ESPECIFICADA" ~ NA_real_,
std_education_level == "NO_ESPECIFICADO" ~ NA_real_,
TRUE ~ NA_real_
)
return(education_scale)
}
# Replace the existing function with this enhanced version
has_significant_education <- function(education_level, education_scale) {
# Handle NULL, empty vector, or NA values in either parameter
if(is.null(education_level) || length(education_level) == 0 ||
is.null(education_scale) || length(education_scale) == 0) {
return(NA_integer_)
}
# Ensure education_scale is numeric
if(!is.numeric(education_scale) && !is.na(education_scale)) {
education_scale <- as.numeric(as.character(education_scale))
}
if(is.na(education_scale)) {
return(NA_integer_)
}
# More nuanced classification with different thresholds
if(education_scale >= 5) {
return(2L)  # Professional level (college or higher)
} else if(education_scale >= 3) {
return(1L)  # Mid-level education (high school or technical)
} else {
return(0L)  # Basic or no education
}
}
# Enhanced function to extract years from text with improved pattern recognition
extract_years_from_text <- function(text) {
if(is.null(text) || length(text) == 0 || is.na(text)) return(character(0))
# Pattern to capture years (1900-2023 range) - enhanced to capture more year formats
year_pattern <- "\\b(19[0-9][0-9]|20[0-2][0-3])\\b"
# Normalized text to handle Spanish date formats and punctuation
normalized_text <- text %>%
# Standardize dashes and date separators
gsub("–", "-", .) %>%
gsub("—", "-", .) %>%
gsub("a la fecha|a la actualidad|al presente|actualmente|hasta hoy|presente|a la fecha actual|hoy día|actualmente|ahora", "2023", ., ignore.case = TRUE) %>%
# Handle Spanish date formats
gsub("enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre", "", ., ignore.case = TRUE) %>%
# Remove punctuation that might interfere with year extraction
gsub("[\\(\\)\\[\\]\\{\\}]", " ", .)
# Extract individual years
years <- stringr::str_extract_all(normalized_text, year_pattern)[[1]]
# Improved pattern for year ranges to catch more formats (1900-2023)
range_pattern <- "\\b(19[0-9][0-9]|20[0-2][0-3])[\\s]*[-–—][\\s]*(19[0-9][0-9]|20[0-2][0-3])\\b"
ranges <- stringr::str_extract_all(normalized_text, range_pattern)
# Enhanced process for ranges into individual years
expanded_years <- character(0)
if(length(ranges[[1]]) > 0) {
for(range in ranges[[1]]) {
start_year <- as.numeric(stringr::str_extract(range, "^(19[0-9][0-9]|20[0-2][0-3])"))
end_year <- as.numeric(stringr::str_extract(range, "(19[0-9][0-9]|20[0-2][0-3])$"))
if(!is.na(start_year) && !is.na(end_year) && end_year >= start_year) {
# Check for reasonable range to avoid extraction errors
if(end_year - start_year <= 60) {  # Maximum 60 year career span
expanded_years <- c(expanded_years, as.character(start_year:end_year))
}
}
}
}
# Handle Spanish date formats with years like "de 2010 a 2015"
spanish_range_pattern <- "\\b(de|desde)[\\s]+(19[0-9][0-9]|20[0-2][0-3])[\\s]+(a|al|hasta)[\\s]+(19[0-9][0-9]|20[0-2][0-3])\\b"
spanish_ranges <- stringr::str_extract_all(normalized_text, spanish_range_pattern)
if(length(spanish_ranges[[1]]) > 0) {
for(range in spanish_ranges[[1]]) {
start_year <- as.numeric(stringr::str_extract(range, "\\b(19[0-9][0-9]|20[0-2][0-3])"))
end_parts <- stringr::str_extract_all(range, "\\b(19[0-9][0-9]|20[0-2][0-3])\\b")[[1]]
end_year <- as.numeric(end_parts[length(end_parts)])
if(!is.na(start_year) && !is.na(end_year) && end_year >= start_year) {
# Check for reasonable range to avoid extraction errors
if(end_year - start_year <= 60) {  # Maximum 60 year career span
expanded_years <- c(expanded_years, as.character(start_year:end_year))
}
}
}
}
# Combine individual years with expanded ranges and remove duplicates
all_years <- unique(c(years, expanded_years))
return(all_years)
}
# Enhanced function to detect public sector experience in Mexican context
extract_public_experience <- function(text, year) {
if(is.null(text) || length(text) == 0 || is.na(text)) return(0)
# Define comprehensive patterns for public sector positions in Mexican government
public_sector_patterns <- c(
# Legislative positions
"diputad[oa]", "senador[a]", "legislad[oa]r", "congresista", "parlamentari[oa]",
"cámar[a]", "congres[o]", "curul", "escaño", "assembleis?ta",
# Executive positions - federal
"president[ea]", "gobernador[a]", "secretari[oa] (de )?estado", "secretari[oa] (de )?(la )?",
"subsecretari[oa]", "oficial mayor", "director[a] general", "director[a] adjunt[oa]",
"coordinador[a] general", "coordinador[a] nacional", "jefe de gobierno", "jefa de gobierno",
"jefatura", "gubernatura", "ejecutivo federal", "poder ejecutivo",
# Executive positions - local
"alcalde", "alcaldesa", "presidente municipal", "presidenta municipal",
"síndic[oa]", "regidor[a]", "concejal", "cabildo", "ayuntamiento", "munícipe",
"edil", "delegad[oa]", "jefe delegacional", "jefa delegacional", "prefect[oa]",
# Judicial positions
"juez", "jueza", "magistrad[oa]", "ministr[oa]", "poder judicial", "tribunal",
"juzgado", "corte", "consej[oa] de la judicatura", "fiscalía", "fiscal",
"procuradurí?a", "procurador[a]", "ministerio público", "mp",
# Electoral institutions
"ine", "ife", "electoral", "iepc", "iee", "fepade", "tepjf",
"electoral", "comité electoral", "instituto electoral", "consejo electoral",
# Public administration
"función pública", "funcion publica", "servicio público", "servicio publico",
"servidor público", "servidor[a] públic[oa]", "servidor[a] public[oa]",
"burócrata", "burocrata", "burócratico", "burocrático", "funcionari[oa]",
"empleado público", "empleada pública", "emplead[oa] gubernamental",
# Government organizations
"dependencia", "entidad", "gobierno federal", "gobierno estatal", "gobierno municipal",
"administración federal", "administracion federal", "administración pública",
"administracion publica", "organismo público", "organismo descentralizado",
"paraestatal", "sector público", "sector publico",
# Additional public institutions
"pemex", "cfe", "issste", "imss", "infonavit", "conacyt", "sep", "sedena", "semar",
"segob", "sagarpa", "semarnat", "secretaría", "secretaria", "ssa", "salud", "sedesol",
"bienestar", "condusef", "profeco", "conagua", "inegi", "institución pública",
"institucion publica", "entidad gubernamental", "conafor", "fonatur", "sectur"
)
# Check if the text contains both the year and a public sector term
year_pattern <- paste0("\\b", year, "\\b")
year_range_pattern <- paste0("\\b[^0-9](19[0-9][0-9]|20[0-2][0-3])[\\s]*[-–—][\\s]*", year, "\\b|\\b",
year, "[\\s]*[-–—][\\s]*(19[0-9][0-9]|20[0-2][0-3])[^0-9]\\b")
year_spanish_pattern <- paste0("\\b(de|desde)[\\s]+(19[0-9][0-9]|20[0-2][0-3])[\\s]+(a|al|hasta)[\\s]+",
year, "\\b|\\b(de|desde)[\\s]+", year, "[\\s]+(a|al|hasta)[\\s]+(19[0-9][0-9]|20[0-2][0-3])\\b")
has_year <- grepl(year_pattern, text) || grepl(year_range_pattern, text) || grepl(year_spanish_pattern, text)
if(has_year) {
for(pattern in public_sector_patterns) {
if(grepl(pattern, text, ignore.case = TRUE)) {
return(1)  # Public sector experience found for this year
}
}
}
# Extract year ranges and check if this year falls within any range
range_pattern <- "\\b(19[0-9][0-9]|20[0-2][0-3])[\\s]*[-–—][\\s]*(19[0-9][0-9]|20[0-2][0-3])\\b"
ranges <- stringr::str_extract_all(text, range_pattern)[[1]]
for(range in ranges) {
start_year <- as.numeric(stringr::str_extract(range, "^(19[0-9][0-9]|20[0-2][0-3])"))
end_year <- as.numeric(stringr::str_extract(range, "(19[0-9][0-9]|20[0-2][0-3])$"))
if(!is.na(start_year) && !is.na(end_year) &&
as.numeric(year) >= start_year && as.numeric(year) <= end_year) {
# Check if any public sector pattern exists near this range
range_pos <- regexpr(range, text)[1]
if(range_pos > 0) {
context_start <- max(1, range_pos - 100)
context_end <- min(nchar(text), range_pos + nchar(range) + 100)
context_text <- substr(text, context_start, context_end)
for(pattern in public_sector_patterns) {
if(grepl(pattern, context_text, ignore.case = TRUE)) {
return(1)  # Public sector experience found for this year within a range
}
}
}
}
}
# Handle Spanish date ranges like "de 2010 a 2015"
spanish_range_pattern <- "\\b(de|desde)[\\s]+(19[0-9][0-9]|20[0-2][0-3])[\\s]+(a|al|hasta)[\\s]+(19[0-9][0-9]|20[0-2][0-3])\\b"
spanish_ranges <- stringr::str_extract_all(text, spanish_range_pattern)[[1]]
for(range in spanish_ranges) {
start_year <- as.numeric(stringr::str_extract(range, "\\b(19[0-9][0-9]|20[0-2][0-3])"))
end_parts <- stringr::str_extract_all(range, "\\b(19[0-9][0-9]|20[0-2][0-3])\\b")[[1]]
end_year <- as.numeric(end_parts[length(end_parts)])
if(!is.na(start_year) && !is.na(end_year) &&
as.numeric(year) >= start_year && as.numeric(year) <= end_year) {
# Check if any public sector pattern exists near this range
range_pos <- regexpr(range, text)[1]
if(range_pos > 0) {
context_start <- max(1, range_pos - 100)
context_end <- min(nchar(text), range_pos + nchar(range) + 100)
context_text <- substr(text, context_start, context_end)
for(pattern in public_sector_patterns) {
if(grepl(pattern, context_text, ignore.case = TRUE)) {
return(1)  # Public sector experience found for this year within a Spanish date range
}
}
}
}
}
return(0)  # No public sector experience found for this year
}
# Enhanced function for private sector experience extraction
extract_private_experience <- function(text, year) {
if(is.null(text) || length(text) == 0 || is.na(text)) return(0)
# Define comprehensive patterns for private sector positions in Mexican business context
private_sector_patterns <- c(
# Business titles
"empresari[oa]", "emprendedor[a]", "director[a] general", "director[a] ejecutiv[oa]",
"presidente corporativo", "presidenta corporativa", "ceo", "cfo", "coo", "cto", "cio",
"gerente", "gerente general", "gerente de área", "subgerente", "jefe de departamento",
"jefe de área", "director[a] comercial", "director[a] administrativ[oa]", "director[a] financier[oa]",
"vicepresidente", "vicepresidenta", "socio", "socia", "fundador[a]", "cofundador[a]",
"accionista", "director[a]", "subdirector[a]", "titular", "ejecutiv[oa]", "administrador[a]",
# Business entities
"compañía", "compañía", "empresa", "firma", "corporación", "corporativo", "grupo empresarial",
"corporativo", "negocio", "microempresa", "pyme", "comercio", "establecimiento", "consorcio",
"sociedad anónima", "s\\.a\\.", "s\\.a\\. de c\\.v\\.", "s\\.r\\.l\\.", "sociedad civil",
"s\\.c\\.", "asociación civil", "a\\.c\\.", "despacho", "bufete", "consultora", "consultoría",
"industria", "industria privada", "sector industrial", "corporación privada",
# Private sector terminology
"sector privado", "iniciativa privada", "entidad privada", "organización privada",
"institución privada", "empresa privada", "empleo privado", "corporativo privado",
"ámbito privado", "esfera privada", "ámbito empresarial", "mundo corporativo",
"empresa familiar", "negocio familiar", "negocio propio", "empresa propia",
# Private industry sectors
"banca", "bancario", "banco", "aseguradora", "seguros", "financiera", "finanzas",
"retail", "mayorista", "inmobiliaria", "constructora", "construcción", "servicios",
"tecnología", "software", "consultoría", "consultor", "asesor", "despacho jurídico",
"firma legal", "abogado corporativo", "contador privado", "contador independiente",
"práctica privada", "clínica privada", "hospital privado", "escuela privada",
"universidad privada", "colegio privado", "academia", "comercio", "ventas",
"farmacéutica", "laboratorio", "manufactura", "fábrica", "industrial", "agroindustria"
)
# Check if the text contains both the year and a private sector term
year_pattern <- paste0("\\b", year, "\\b")
year_range_pattern <- paste0("\\b[^0-9](19[0-9][0-9]|20[0-2][0-3])[\\s]*[-–—][\\s]*", year, "\\b|\\b",
year, "[\\s]*[-–—][\\s]*(19[0-9][0-9]|20[0-2][0-3])[^0-9]\\b")
year_spanish_pattern <- paste0("\\b(de|desde)[\\s]+(19[0-9][0-9]|20[0-2][0-3])[\\s]+(a|al|hasta)[\\s]+",
year, "\\b|\\b(de|desde)[\\s]+", year, "[\\s]+(a|al|hasta)[\\s]+(19[0-9][0-9]|20[0-2][0-3])\\b")
has_year <- grepl(year_pattern, text) || grepl(year_range_pattern, text) || grepl(year_spanish_pattern, text)
if(has_year) {
for(pattern in private_sector_patterns) {
if(grepl(pattern, text, ignore.case = TRUE)) {
return(1)  # Private sector experience found for this year
}
}
}
# Extract year ranges and check if this year falls within any range
range_pattern <- "\\b(19[0-9][0-9]|20[0-2][0-3])[\\s]*[-–—][\\s]*(19[0-9][0-9]|20[0-2][0-3])\\b"
ranges <- stringr::str_extract_all(text, range_pattern)[[1]]
for(range in ranges) {
start_year <- as.numeric(stringr::str_extract(range, "^(19[0-9][0-9]|20[0-2][0-3])"))
end_year <- as.numeric(stringr::str_extract(range, "(19[0-9][0-9]|20[0-2][0-3])$"))
if(!is.na(start_year) && !is.na(end_year) &&
as.numeric(year) >= start_year && as.numeric(year) <= end_year) {
# Check if any private sector pattern exists near this range
range_pos <- regexpr(range, text)[1]
if(range_pos > 0) {
context_start <- max(1, range_pos - 100)
context_end <- min(nchar(text), range_pos + nchar(range) + 100)
context_text <- substr(text, context_start, context_end)
for(pattern in private_sector_patterns) {
if(grepl(pattern, context_text, ignore.case = TRUE)) {
return(1)  # Private sector experience found for this year within a range
}
}
}
}
}
# Handle Spanish date ranges like "de 2010 a 2015"
spanish_range_pattern <- "\\b(de|desde)[\\s]+(19[0-9][0-9]|20[0-2][0-3])[\\s]+(a|al|hasta)[\\s]+(19[0-9][0-9]|20[0-2][0-3])\\b"
spanish_ranges <- stringr::str_extract_all(text, spanish_range_pattern)[[1]]
for(range in spanish_ranges) {
start_year <- as.numeric(stringr::str_extract(range, "\\b(19[0-9][0-9]|20[0-2][0-3])"))
end_parts <- stringr::str_extract_all(range, "\\b(19[0-9][0-9]|20[0-2][0-3])\\b")[[1]]
end_year <- as.numeric(end_parts[length(end_parts)])
if(!is.na(start_year) && !is.na(end_year) &&
as.numeric(year) >= start_year && as.numeric(year) <= end_year) {
# Check if any private sector pattern exists near this range
range_pos <- regexpr(range, text)[1]
if(range_pos > 0) {
context_start <- max(1, range_pos - 100)
context_end <- min(nchar(text), range_pos + nchar(range) + 100)
context_text <- substr(text, context_start, context_end)
for(pattern in private_sector_patterns) {
if(grepl(pattern, context_text, ignore.case = TRUE)) {
return(1)  # Private sector experience found for this year within a Spanish date range
}
}
}
}
}
return(0)  # No private sector experience found for this year
}
# Enhanced function to detect pre-2000 experience
extract_pre_2000_experience <- function(text) {
if(is.null(text) || length(text) == 0 || is.na(text)) return(list(has_experience = FALSE, type = "Ninguna"))
# Public and private sector patterns (reusing from the existing functions)
public_sector_patterns <- c(
"diputad[oa]", "senador[a]", "legislad[oa]r", "congresista", "parlamentari[oa]",
"cámar[a]", "congres[o]", "president[ea]", "gobernador[a]", "secretari[oa]",
"alcalde", "alcaldesa", "presidente municipal", "síndic[oa]", "regidor[a]",
"función pública", "servicio público", "gobierno federal", "gobierno estatal",
"administración pública", "servidor público", "funcionari[oa]",
"juez", "jueza", "magistrad[oa]", "tribunal", "poder judicial", "fiscal",
"electoral", "instituto electoral", "consejo electoral"
)
private_sector_patterns <- c(
"empresari[oa]", "emprendedor[a]", "director[a]", "ceo", "cfo", "coo",
"gerente", "vicepresidente", "socio", "fundador[a]", "accionista",
"compañía", "empresa", "firma", "corporación", "negocio", "comercio",
"sector privado", "iniciativa privada", "empresa privada", "corporativo"
)
# Look for years before 2000
pre_2000_years <- c()
# Extract years from text
all_years <- extract_years_from_text(text)
if(length(all_years) > 0) {
pre_2000_years <- all_years[as.numeric(all_years) < 2000]
}
if(length(pre_2000_years) == 0) {
# Also check for decade references
decade_patterns <- c(
"años 90", "década de los 90", "noventas", "década de 1990",
"años 80", "década de los 80", "ochentas", "década de 1980",
"años 70", "década de los 70", "setentas", "década de 1970",
"años 60", "década de los 60", "sesentas", "década de 1960",
"siglo XX", "siglo veinte", "del siglo pasado"
)
has_pre_2000_ref <- any(sapply(decade_patterns, function(pattern) grepl(pattern, text, ignore.case = TRUE)))
if(!has_pre_2000_ref) {
return(list(has_experience = FALSE, type = "Ninguna"))
}
}
# Determine the type of experience
has_public <- any(sapply(public_sector_patterns, function(pattern)
grepl(pattern, text, ignore.case = TRUE)))
has_private <- any(sapply(private_sector_patterns, function(pattern)
grepl(pattern, text, ignore.case = TRUE)))
if(has_public && has_private) {
experience_type <- "Mixto"
} else if(has_public) {
experience_type <- "Público"
} else if(has_private) {
experience_type <- "Privado"
} else {
experience_type <- "No Especificado"
}
return(list(has_experience = TRUE, type = experience_type))
}
# Helper function to find the maximum consecutive runs of 1s
max_consecutive_ones <- function(x) {
if(all(is.na(x))) return(0)
x_numeric <- as.numeric(x)
x_numeric[is.na(x_numeric)] <- 0
# Convert to string for easy pattern matching
str_x <- paste(x_numeric, collapse = "")
# Find all runs of ones
ones_runs <- gregexpr("1+", str_x)[[1]]
# If no runs found, return 0
if(ones_runs[1] == -1) return(0)
# Get the lengths of each run
run_lengths <- attr(ones_runs, "match.length")
# Return the maximum run length
return(max(run_lengths))
}
# Helper function to find the first year with experience
first_experience_year <- function(x) {
years <- 2000:2020
x_numeric <- as.numeric(x)
if(all(is.na(x_numeric) | x_numeric == 0)) {
return(NA_integer_)
}
for(i in 1:length(years)) {
if(!is.na(x_numeric[i]) && x_numeric[i] == 1) {
return(years[i])
}
}
return(NA_integer_)
}
# Enhanced function to create yearly experience indicators with improved features
